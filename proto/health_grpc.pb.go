// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.13.0
// source: proto/health.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	UserBlinked(ctx context.Context, opts ...grpc.CallOption) (Health_UserBlinkedClient, error)
	ShoulderChangeAngle(ctx context.Context, opts ...grpc.CallOption) (Health_ShoulderChangeAngleClient, error)
	NoseChangeAngle(ctx context.Context, opts ...grpc.CallOption) (Health_NoseChangeAngleClient, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) UserBlinked(ctx context.Context, opts ...grpc.CallOption) (Health_UserBlinkedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[0], "/Health/UserBlinked", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthUserBlinkedClient{stream}
	return x, nil
}

type Health_UserBlinkedClient interface {
	Send(*Blinked) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type healthUserBlinkedClient struct {
	grpc.ClientStream
}

func (x *healthUserBlinkedClient) Send(m *Blinked) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthUserBlinkedClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthClient) ShoulderChangeAngle(ctx context.Context, opts ...grpc.CallOption) (Health_ShoulderChangeAngleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[1], "/Health/ShoulderChangeAngle", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthShoulderChangeAngleClient{stream}
	return x, nil
}

type Health_ShoulderChangeAngleClient interface {
	Send(*ShouldersAngles) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type healthShoulderChangeAngleClient struct {
	grpc.ClientStream
}

func (x *healthShoulderChangeAngleClient) Send(m *ShouldersAngles) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthShoulderChangeAngleClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthClient) NoseChangeAngle(ctx context.Context, opts ...grpc.CallOption) (Health_NoseChangeAngleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[2], "/Health/NoseChangeAngle", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthNoseChangeAngleClient{stream}
	return x, nil
}

type Health_NoseChangeAngleClient interface {
	Send(*NoseAngle) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type healthNoseChangeAngleClient struct {
	grpc.ClientStream
}

func (x *healthNoseChangeAngleClient) Send(m *NoseAngle) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthNoseChangeAngleClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	UserBlinked(Health_UserBlinkedServer) error
	ShoulderChangeAngle(Health_ShoulderChangeAngleServer) error
	NoseChangeAngle(Health_NoseChangeAngleServer) error
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) UserBlinked(Health_UserBlinkedServer) error {
	return status.Errorf(codes.Unimplemented, "method UserBlinked not implemented")
}
func (UnimplementedHealthServer) ShoulderChangeAngle(Health_ShoulderChangeAngleServer) error {
	return status.Errorf(codes.Unimplemented, "method ShoulderChangeAngle not implemented")
}
func (UnimplementedHealthServer) NoseChangeAngle(Health_NoseChangeAngleServer) error {
	return status.Errorf(codes.Unimplemented, "method NoseChangeAngle not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_UserBlinked_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthServer).UserBlinked(&healthUserBlinkedServer{stream})
}

type Health_UserBlinkedServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Blinked, error)
	grpc.ServerStream
}

type healthUserBlinkedServer struct {
	grpc.ServerStream
}

func (x *healthUserBlinkedServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthUserBlinkedServer) Recv() (*Blinked, error) {
	m := new(Blinked)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Health_ShoulderChangeAngle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthServer).ShoulderChangeAngle(&healthShoulderChangeAngleServer{stream})
}

type Health_ShoulderChangeAngleServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ShouldersAngles, error)
	grpc.ServerStream
}

type healthShoulderChangeAngleServer struct {
	grpc.ServerStream
}

func (x *healthShoulderChangeAngleServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthShoulderChangeAngleServer) Recv() (*ShouldersAngles, error) {
	m := new(ShouldersAngles)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Health_NoseChangeAngle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthServer).NoseChangeAngle(&healthNoseChangeAngleServer{stream})
}

type Health_NoseChangeAngleServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*NoseAngle, error)
	grpc.ServerStream
}

type healthNoseChangeAngleServer struct {
	grpc.ServerStream
}

func (x *healthNoseChangeAngleServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthNoseChangeAngleServer) Recv() (*NoseAngle, error) {
	m := new(NoseAngle)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Health",
	HandlerType: (*HealthServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserBlinked",
			Handler:       _Health_UserBlinked_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ShoulderChangeAngle",
			Handler:       _Health_ShoulderChangeAngle_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "NoseChangeAngle",
			Handler:       _Health_NoseChangeAngle_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/health.proto",
}
